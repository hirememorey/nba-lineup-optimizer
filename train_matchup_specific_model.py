#!/usr/bin/env python3
"""
Train Matchup-Specific Bayesian Model

This script trains the enhanced Bayesian model with matchup-specific parameters
(36√ó16 architecture) on the matchup-specific dataset generated by
generate_matchup_specific_bayesian_data.py.

This implements the full paper methodology with 612 parameters:
- 36 matchup-specific intercepts
- 36√ó8 offensive coefficients (288 params)
- 36√ó8 defensive coefficients (288 params)
"""

import pandas as pd
import numpy as np
import cmdstanpy
import logging
import argparse
from pathlib import Path
import time

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def load_matchup_specific_data(data_path: str):
    """Load and prepare matchup-specific data for Stan model."""
    logger.info(f"Loading matchup-specific data from {data_path}")
    
    df = pd.read_csv(data_path)
    logger.info(f"Loaded {len(df):,} possessions")
    logger.info(f"Unique matchups: {df['matchup_id'].nunique()}")
    
    # Prepare Stan data structure
    N = len(df)
    
    # Outcome variable
    y = df['outcome'].values
    
    # Matchup IDs (0-based, compatible with Stan 0-35 indexing)
    matchup_id = df['matchup_id'].values
    
    # Z-matrices (aggregated archetype skills)
    z_off_columns = [f'z_off_{i}' for i in range(8)]
    z_def_columns = [f'z_def_{i}' for i in range(8)]
    
    z_off = df[z_off_columns].values
    z_def = df[z_def_columns].values
    
    stan_data = {
        'N': N,
        'y': y,
        'matchup_id': matchup_id,
        'z_off': z_off,
        'z_def': z_def
    }
    
    logger.info(f"Prepared Stan data:")
    logger.info(f"  Observations: {N:,}")
    logger.info(f"  Unique matchups: {df['matchup_id'].nunique()}/36")
    logger.info(f"  Z-off shape: {z_off.shape}")
    logger.info(f"  Z-def shape: {z_def.shape}")
    
    return stan_data, df

def train_matchup_specific_model(
    data_path: str = "matchup_specific_bayesian_data_full.csv",
    stan_model: str = "bayesian_model_k8_matchup_specific.stan",
    draws: int = 2000,
    tune: int = 1000,
    chains: int = 4,
    adapt_delta: float = 0.95,
    output_dir: str = "stan_model_results_matchup_specific"
):
    """Train the matchup-specific Bayesian model."""
    logger.info("="*80)
    logger.info("TRAINING MATCHUP-SPECIFIC BAYESIAN MODEL")
    logger.info("="*80)
    
    start_time = time.time()
    
    # Load data
    stan_data, df = load_matchup_specific_data(data_path)
    
    # Compile Stan model
    logger.info(f"\nCompiling Stan model: {stan_model}")
    model = cmdstanpy.CmdStanModel(stan_file=stan_model)
    logger.info("‚úÖ Model compiled successfully")
    
    # Run MCMC sampling
    logger.info(f"\nStarting MCMC sampling:")
    logger.info(f"  Chains: {chains}")
    logger.info(f"  Warmup iterations: {tune}")
    logger.info(f"  Posterior samples: {draws}")
    logger.info(f"  Total iterations per chain: {tune + draws}")
    logger.info(f"  Adapt delta: {adapt_delta}")
    
    sampling_start = time.time()
    
    fit = model.sample(
        data=stan_data,
        chains=chains,
        iter_warmup=tune,
        iter_sampling=draws,
        adapt_delta=adapt_delta,
        seed=42,
        show_progress=True
    )
    
    sampling_time = time.time() - sampling_start
    total_time = time.time() - start_time
    
    logger.info(f"\n‚úÖ Sampling completed in {sampling_time/60:.1f} minutes")
    logger.info(f"‚úÖ Total training time: {total_time/60:.1f} minutes")
    
    # Check diagnostics
    logger.info("\n" + "="*80)
    logger.info("DIAGNOSTICS")
    logger.info("="*80)
    
    diagnostics = fit.diagnose()
    logger.info(diagnostics)
    
    # Save results
    logger.info(f"\nSaving results to {output_dir}")
    Path(output_dir).mkdir(exist_ok=True)
    
    # Save samples
    fit.save_csvfiles(dir=output_dir)
    logger.info(f"‚úÖ Samples saved to {output_dir}/")
    
    # Extract and save coefficient means
    logger.info("\nExtracting coefficient means...")
    
    # Note: 612 parameters total
    # beta_0: 36 intercepts
    # beta_off: 36√ó8 = 288 offensive coefficients  
    # beta_def: 36√ó8 = 288 defensive coefficients
    
    beta_0 = fit.stan_variable('beta_0')  # Shape: (num_samples, 36)
    beta_off = fit.stan_variable('beta_off')  # Shape: (num_samples, 36, 8)
    beta_def = fit.stan_variable('beta_def')  # Shape: (num_samples, 36, 8)
    
    # Calculate means (across posterior samples)
    beta_0_mean = np.mean(beta_0, axis=0)
    beta_off_mean = np.mean(beta_off, axis=0)
    beta_def_mean = np.mean(beta_def, axis=0)
    
    # Save coefficient CSV
    coefficients_df = []
    for matchup in range(36):
        row = {'matchup_id': matchup}
        
        # Add intercept
        row['beta_0'] = beta_0_mean[matchup]
        
        # Add offensive coefficients (8 archetypes)
        for arch in range(8):
            row[f'beta_off_{arch}'] = beta_off_mean[matchup, arch]
        
        # Add defensive coefficients (8 archetypes)
        for arch in range(8):
            row[f'beta_def_{arch}'] = beta_def_mean[matchup, arch]
        
        coefficients_df.append(row)
    
    coefficients_df = pd.DataFrame(coefficients_df)
    coefficients_path = f"{output_dir}/matchup_specific_coefficients.csv"
    coefficients_df.to_csv(coefficients_path, index=False)
    logger.info(f"‚úÖ Coefficients saved to {coefficients_path}")
    logger.info(f"   Shape: {coefficients_df.shape} (36 matchups √ó 17 coefficients)")
    
    # Generate summary report
    summary_path = f"{output_dir}/training_summary.txt"
    with open(summary_path, 'w') as f:
        f.write("MATCHUP-SPECIFIC BAYESIAN MODEL TRAINING SUMMARY\n")
        f.write("="*80 + "\n\n")
        
        f.write(f"Training Data: {data_path}\n")
        f.write(f"Observations: {len(df):,}\n")
        f.write(f"Unique Matchups: {df['matchup_id'].nunique()}/36\n")
        f.write(f"Model Architecture: 36√ó16 parameters (612 total)\n\n")
        
        f.write(f"Sampling Parameters:\n")
        f.write(f"  Chains: {chains}\n")
        f.write(f"  Warmup: {tune}\n")
        f.write(f"  Samples: {draws}\n")
        f.write(f"  Adapt Delta: {adapt_delta}\n\n")
        
        f.write(f"Training Time:\n")
        f.write(f"  Sampling: {sampling_time/60:.1f} minutes\n")
        f.write(f"  Total: {total_time/60:.1f} minutes\n\n")
        
        f.write(f"Outputs:\n")
        f.write(f"  Samples: {output_dir}/\n")
        f.write(f"  Coefficients: {coefficients_path}\n")
        f.write(f"  Summary: {summary_path}\n")
    
    logger.info(f"‚úÖ Summary report saved to {summary_path}")
    
    logger.info("\n" + "="*80)
    logger.info("‚úÖ TRAINING COMPLETE!")
    logger.info("="*80)
    
    return fit

def main():
    parser = argparse.ArgumentParser(description="Train matchup-specific Bayesian model")
    parser.add_argument("--data", default="matchup_specific_bayesian_data_full.csv",
                        help="Path to matchup-specific training CSV")
    parser.add_argument("--stan", default="bayesian_model_k8_matchup_specific.stan",
                        help="Path to Stan model file")
    parser.add_argument("--draws", type=int, default=2000,
                        help="Posterior samples per chain")
    parser.add_argument("--tune", type=int, default=1000,
                        help="Warmup iterations per chain")
    parser.add_argument("--chains", type=int, default=4,
                        help="Number of MCMC chains")
    parser.add_argument("--adapt-delta", type=float, default=0.95, dest="adapt_delta",
                        help="Target acceptance rate")
    parser.add_argument("--output", default="stan_model_results_matchup_specific",
                        help="Output directory for results")
    
    args = parser.parse_args()
    
    success = train_matchup_specific_model(
        data_path=args.data,
        stan_model=args.stan,
        draws=args.draws,
        tune=args.tune,
        chains=args.chains,
        adapt_delta=args.adapt_delta,
        output_dir=args.output
    )
    
    if success:
        print("\n‚úÖ Matchup-specific model training completed successfully!")
        print(f"üìä Results saved to: {args.output}/")
        print(f"üìà Coefficients: {args.output}/matchup_specific_coefficients.csv")
    else:
        print("\n‚ùå Failed to train matchup-specific model")
        exit(1)

if __name__ == "__main__":
    main()


